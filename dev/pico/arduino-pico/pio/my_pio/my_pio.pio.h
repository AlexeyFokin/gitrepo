// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ----------------- //
// my_pio_experiment //
// ----------------- //

#define my_pio_experiment_wrap_target 0
#define my_pio_experiment_wrap 7

static const uint16_t my_pio_experiment_program_instructions[] = {
            //     .wrap_target
    0x7801, //  0: out    pins, 1         side 1     
    0xf03e, //  1: set    x, 30           side 0     
    0x6001, //  2: out    pins, 1                    
    0x0042, //  3: jmp    x--, 2                     
    0x6001, //  4: out    pins, 1                    
    0xf03e, //  5: set    x, 30           side 0     
    0x6001, //  6: out    pins, 1                    
    0x0046, //  7: jmp    x--, 6                     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program my_pio_experiment_program = {
    .instructions = my_pio_experiment_program_instructions,
    .length = 8,
    .origin = -1,
};

static inline pio_sm_config my_pio_experiment_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + my_pio_experiment_wrap_target, offset + my_pio_experiment_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}

static inline void my_pio_experiment_program_init(PIO pio, uint sm, uint offset, uint pin, uint start, float div) {
    pio_gpio_init(pio, pin);
    pio_gpio_init(pio, start);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
    pio_sm_set_consecutive_pindirs(pio, sm, start, 1, true);
    pio_sm_config c = my_pio_experiment_program_get_default_config(offset);
    pio_sm_set_pins_with_mask(pio, sm, 0, 1u << pin);   // set 
    sm_config_set_out_pins(&c, pin, 1);
    sm_config_set_sideset_pins(&c, start);
    sm_config_set_out_shift(&c, true, true, 32);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    sm_config_set_clkdiv(&c, div);
    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}

#endif

