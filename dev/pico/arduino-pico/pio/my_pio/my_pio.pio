
.program my_pio_experiment
.side_set 1 opt


; .wrap_target
; do_1:
;     nop         side 1 [5] ; Low for 6 cycles (5 delay, +1 for nop)
; //    jmp get_bit side 1 [3] ; High for 4 cycles. 'get_bit' takes another 2 cycles
; do_0:
;     nop         side 0 [5] ; Output high for 6 cycles
; //    nop         side 0 [3] ; Output low for 4 cycles
; public start:
; get_bit:
;     out x, 1               ; Always shift out one bit from OSR to X, so we can
;     jmp !x do_0            ; branch on it. Autopull refills the OSR when empty.
; .wrap

; public start:
; .wrap_target

; out  PINS, 1
; .wrap


    //pull        side 1 [0]  ; Assert stop bit, or stall with line in idle state
    out pins, 1  side 1 [0]
    set x, 30    side 0 [0]  ; Preload bit counter, assert start bit for 8 clocks
bitloop:                   ; This loop will run 8 times (8n1 UART)
    out pins, 1            ; Shift 1 bit from OSR to the first OUT pin
    jmp x-- bitloop    [0]  ; Each loop iteration is 8 cycles.
    //pull        side 0 [0]
    out pins, 1        [0]
    set x, 30   side 0 [0]
bitloop1:                   ; This loop will run 8 times (8n1 UART)
    out pins, 1            ; Shift 1 bit from OSR to the first OUT pin
    jmp x-- bitloop1    [0]    

% c-sdk {
static inline void my_pio_experiment_program_init(PIO pio, uint sm, uint offset, uint pin, uint start, float div) {
    pio_gpio_init(pio, pin);
    pio_gpio_init(pio, start);

    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
    pio_sm_set_consecutive_pindirs(pio, sm, start, 1, true);

    pio_sm_config c = my_pio_experiment_program_get_default_config(offset);

    pio_sm_set_pins_with_mask(pio, sm, 0, 1u << pin);   // set 

    sm_config_set_out_pins(&c, pin, 1);
    sm_config_set_sideset_pins(&c, start);


    sm_config_set_out_shift(&c, true, true, 32);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    sm_config_set_clkdiv(&c, div);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);

    
}
%}
